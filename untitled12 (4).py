# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qvut_SJlpqrbndOEoVHi298Vuj1rAiMi
"""



import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,confusion_matrix

data=pd.read_csv("healthcare-dataset-stroke-data.csv")
data

data.shape

data.head(10)

data.isnull().sum()

data.apply(lambda x: x.value_counts().get("Unknown", 0))

data['work_type'].value_counts(normalize=True)

data['smoking_status'].value_counts(normalize=True)

#data.drop(data[data['smoking_status'] == 'Unknown'].index, inplace=True)

data.apply(lambda x: x.value_counts().get("Other", 0))

data.shape

correlation = data.corr()
correlation

sns.histplot(data, x="gender",hue="stroke")

sns.pairplot(data)

plt.figure(figsize=(25, 5))
sns.displot(data=data,x='age', hue='stroke',kde=False, bins=20)
sns.despine()

plt.figure(figsize=(15, 5))
sns.displot(data=data,x='smoking_status', hue='stroke',kde=False, bins=20)
sns.despine()

plt.figure(figsize=(15, 5))
sns.displot(data=data,x='heart_disease', hue='stroke',kde=False, bins=20)
sns.despine()

plt.figure(figsize=(15, 5))
sns.heatmap(correlation, annot=True)
sns.despine()

upper = correlation.where(np.triu(np.ones(correlation.shape), k=1).astype(np.bool))

#data=data.drop("work_type",axis=1)
#data=data.drop("Residence_type",axis=1)
#data=data.drop("ever_married",axis=1)
data=data.drop("smoking_status",axis=1)
#data=data.drop("gender",axis=1)

map_dict = {'Private': 0, 'Self-employed': 1, 'children': 2, 'Govt_job': 3, 'Never_worked': 4}
data['work_type'].replace(map_dict, inplace=True)

#data.replace({'smoking_status': {'never smoked': 0, 'Unknown': -1,'smokes':1,'formerly smoked':2}}, inplace=True)

data.replace({'ever_married': {'Yes': 1, 'No': 0}}, inplace=True)

data.replace({'Residence_type': {'Urban': 1, 'Rural': 0}}, inplace=True)

data.replace({'gender': {'Male': 1, 'Female': 0,'Other':0}}, inplace=True)
data



mean_bmi = data['bmi'].mean()
data['bmi'].fillna(value=mean_bmi, inplace=True)

#calculate IQR for each column
#Q1 = data.quantile(0.25)
#Q3 = data.quantile(0.75)
#IQR = Q3 - Q1
#filter out values that are more than 1.5 times the IQR away from the Q1 or Q3
#outliers2 = data[((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)]
#outliers2

x=data.iloc[:,0:10]
y=data["stroke"]

x

y

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 1/3, random_state = 0)

model=KNeighborsClassifier(n_neighbors=10)
model.fit(x_train,y_train)

y_preds=model.predict(x_test)
print(f"Testing score = {accuracy_score(y_test,y_preds)}")

#Testing score = 0.9483568075117371

classifier = LogisticRegression(random_state = 0)

classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

cm = confusion_matrix(y_test, y_pred)
cm

cr=classification_report(y_test, y_pred)
print(cr)

import joblib
joblib_file = "stroke prediction"
joblib.dump(model, joblib_file)
loaded_model = joblib.load(open(joblib_file, 'rb'))
y_pred = loaded_model.predict(x_test)
result = np.round(accuracy_score(y_test, y_pred) ,2)
print(result)





#!pip install streamlit

#!pip install streamlit_lottie

import streamlit as st
import requests
from streamlit_lottie import st_lottie
import joblib
import numpy as np
st.set_page_config(page_title='stroke prediction', page_icon='::star::')

st.set_page_config(page_title='stroke prediction', page_icon='::star::')

def load_lottie(url): # test url if you want to use your own lottie file 'valid url' or 'invalid url'
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

def prepare_input_data_for_model(id,gender,age,hypertension,heart_disease,ever_married,work_type,Residence_type,avg_glucose_level,bmi,smoking_status):
    #sex = gender.map(gen)
    if gender == 'Male':
        sex = 0
    else:
        sex = 1
    #s_b = ssc_b.map(sb)
    if ever_married== 'Yes':
        e_m = 1
    else:
        e_m = 0
    #h_b = hsc_b.map(hb)
    if work_type == 'Private':
        w_t = 0
    elif work_type=='employed':
        w_t = 1
    elif work_type =='children':
        w_t = 2
    elif work_type =='Govt_job':
      w_t=3
    else:
      w_t=4

    #h_s = hsc_subject.map(h_sub)
    if Residence_type == 'Urban':
        r_t = 1
    else  :
        r_t = 0


    A = [id,sex,age,hypertension,heart_disease,e_m,w_t,Residence_type,avg_glucose_level,bmi,smoking_status]
    sample = np.array(A).reshape(-1,len(A))

    return sample



loaded_model = joblib.load(open("stroke prediction", 'rb'))
#lottie_link = ""
#animation = load_lottie(lottie_link)


st.write('# stroke prediction Deployment')
#st.header('Placement')

st.write('---')
st.subheader('Enter your details to predict your job placement status')

with st.container():

    right_column, left_column = st.columns(2)
#def prepare_input_data_for_model(id,gender,age,hypertension,heart_disease,ever_married,work_type,Residence_type,avg_glucose_level,bmi,smoking_status):

    with right_column:
        id = st.text_input('Name:')

        gender = st.radio('Gender : ', ['Female', 'Male'])

        age = st.number_input(' age: ', )

        hypertension= st.number_input('hypertension : ', )

        heart_disease = st.number_input('heart_disease : ', )

        ever_married = st.text_input('HSC Board : ', )

        work_type = st.selectbox('HSC Subject : ', ('Commerce', 'Science', 'Arts'))

        Residence_type= st.number_input('Degree Percentage : ', min_value=0.0, max_value=100.0, value=0.0, step=0.1)

        avg_glucose_level= st.selectbox('Undergraduate Degree : ', ('comm&Mgmt', 'Sci&Tech', 'Others'))

        bmi= st.radio('Work Experience : ', ['Yes', 'No'])

        smoking_status = st.number_input('Employability Test Percentage : ', min_value=0.0, max_value=100.0, value=0.0, step=0.1)

    #with left_column:
        #st_lottie(animation, speed=1, height=400, key="initial")


    if st.button('Predict'):
            pred_Y = loaded_model.predict(sample)

            if pred_Y == 0:
                #st.write("## Predicted Status : ", result)
                st.write('### Congratulations ', id, '!! You are placed.')
                st.balloons()
            else:
                st.write('### Sorry ', id, '!! You are not placed.')



